<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on Andream</title>
    <link>https://blog.andream.app/tags/vue/</link>
    <description>Recent content in Vue on Andream</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.andream.app/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue入门</title>
      <link>https://blog.andream.app/post/vue%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.andream.app/post/vue%E5%85%A5%E9%97%A8/</guid>
      <description>有基础的HTML+CSS+JS知识就阔以搞起了
 Hello Vue —— 声明式渲染 &amp;lt;html&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; Hello Vue, My name is xxx. &amp;lt;/div&amp;gt; &amp;lt;/html&amp;gt;  这是一个最简单的网页了，略去了网页其他不必要的细节，我打算据此引入Vue的使用。
&amp;lt;html&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; Hello Vue, My name is {{ name }}. &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;https://unpkg.com/vue&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var obj = new Vue({ el: &#39;#app&#39;, data: { name: &#39;Biao&#39; } }) &amp;lt;/script&amp;gt; &amp;lt;/html&amp;gt;  这个代码很好懂，目的是用js动态填充文档元素里的{{name}}模板。
从面向对象的角度来理解Vue的工作原理，那么这段代码最关键的一个词就是：new。就好像一首诗的“诗眼”一样。
通过new创建了一个Vue对象实例，而这个对象将文档元素和数据联系在了一起。注意，Vue并非是简单地“模板替换”，在console里输入obj.name=&amp;lsquo;Tony&amp;rsquo;，你会发现文档响应式的改变了，这意味着Vue对象obj维护着元素#app和其他Vue属性data之间的关系。
再提一问：Vue为什么要这样维护？比用DOM维护有什么好处？答案是DOM将结点元素视为一个对象，而Vue将有结构的数据视为一个对象。用Vue修改name只需要obj.name=&amp;lsquo;Tony&amp;rsquo;即可，而用DOM要先document.getElementById(&amp;lsquo;app&amp;rsquo;)再修改innerHTML。
如果再深究一步：Vue怎样实现这样的维护？那所有的秘密都藏在&amp;lt;script src=&amp;quot;https://unpkg.com/vue&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;这一行里了，恐怕只有阅读了源码才能清楚。
条件与循环 &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;p v-if=&amp;quot;seen&amp;quot;&amp;gt;现在你看到我了&amp;lt;/p&amp;gt; &amp;lt;li v-for=&amp;quot;todo in todos&amp;quot;&amp;gt; {{ todo.text }} &amp;lt;/li&amp;gt; &amp;lt;/div&amp;gt; var obj = new Vue({ el: &#39;#app&#39;, data: { seen: true, todos: [ { text: &#39;学习 JavaScript&#39; }, { text: &#39;学习 Vue&#39; }, { text: &#39;整个牛项目&#39; } ] } })  速查手册 v-if=&amp;quot;seen&amp;quot; v-for=&amp;quot;todo in todos&amp;quot; v-on:click=&amp;quot;reverseMessage&amp;quot; // 事件绑定 v-model=&amp;quot;message&amp;quot; // 表单数据绑定 var obj = new Vue({ el: &#39;#app&#39;, data: { name: &#39;Biao&#39;, seen: true, todo: [] }, methods: { reverseMessage: function () { this.</description>
    </item>
    
  </channel>
</rss>